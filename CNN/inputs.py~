
import network4
from network4 import Network
from network4 import ConvPoolLayer, FullyConnectedLayer, SoftmaxLayer
training_data, validation_data, test_data = network4.load_data_shared()
mini_batch_size = 100
from network4 import ReLU
from theano.tensor import tanh

net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(20, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 230,4), 
                      filter_shape=(10, 20,3, 3), 
                      poolsize=(2, 2),activation_fn = ReLU),
        FullyConnectedLayer(
            n_in=10*1*114, n_out=100, activation_fn = ReLU, p_dropout=0.5),
        SoftmaxLayer(n_in=100, n_out=2)], 
        mini_batch_size)

net.SGD(training_data, 40, mini_batch_size, 0.01,validation_data, test_data,tolerance=100)


#Nueva version con todo tipo de aprendizaje
import network6
from network6 import Network
from network6 import ConvPoolLayer, FullyConnectedLayer, SoftmaxLayer
training_data, validation_data, test_data = network6.load_data_shared()
mini_batch_size = 100
from network6 import ReLU
from theano.tensor import tanh

net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(20, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 230,4), 
                      filter_shape=(10, 20,3, 3), 
                      poolsize=(2, 2),activation_fn = ReLU),
        FullyConnectedLayer(
            n_in=10*1*114, n_out=100, activation_fn = ReLU, p_dropout=0.5),
	FullyConnectedLayer(n_in=100, n_out= 10,activation_fn = ReLU, p_dropout = 0.5),
        SoftmaxLayer(n_in=10, n_out=2)], 
        mini_batch_size)

net.SGD(training_data, 40, mini_batch_size, 0.1,validation_data, test_data,lmbda=0.01)

#Primera version
#Simple Net

net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(10, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 10, 230,4), 
                      filter_shape=(20, 10,3, 3), 
                      poolsize=(2, 2),activation_fn = ReLU),
        FullyConnectedLayer(
            n_in=20*1*114, n_out=100, activation_fn = ReLU),
        SoftmaxLayer(n_in=100, n_out=2)], 
        mini_batch_size)


net.SGD(training_data, 100, mini_batch_size, 0.01,validation_data, test_data,lmbda=0.01)

#Simple Net 2
import network7
from network7 import Network
from network7 import ConvPoolLayer, FullyConnectedLayer, SoftmaxLayer
training_data, validation_data, test_data = network7.load_data_shared()
mini_batch_size = 10
from network7 import ReLU
from theano.tensor import tanh

net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(10, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 10, 230,4), 
                      filter_shape=(20, 10,3, 3), 
                      poolsize=(2, 2),activation_fn = ReLU),
        FullyConnectedLayer(
            n_in=20*1*114, n_out=100, activation_fn = ReLU),
        SoftmaxLayer(n_in=100, n_out=2)], 
        mini_batch_size)


net.SGD(training_data, 20, mini_batch_size,3000,validation_data, test_data,lmbda=0.1)


#Segunda version
net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(20, 1, 3, 3), 
                      poolsize=(2, 2)),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 230,4), 
                      filter_shape=(10, 20,3, 3), 
                      poolsize=(2, 2)),
        FullyConnectedLayer(
            n_in=10*1*114, n_out=100, p_dropout=0.5),
	FullyConnectedLayer(n_in=100, n_out= 10, p_dropout = 0.5),
        SoftmaxLayer(n_in=10, n_out=2)], 
        mini_batch_size)

net.SGD(training_data, 60, mini_batch_size, 1,validation_data, test_data,lmbda=1)

net.SGD(training_data, 60, mini_batch_size, 0.1,validation_data, test_data)

#Tercera version

net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(20, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=tanh),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 230,4), 
                      filter_shape=(10, 20,3, 3), 
                      poolsize=(2, 2),activation_fn = tanh),
        FullyConnectedLayer(
            n_in=10*1*114, n_out=100, activation_fn = tanh),
	FullyConnectedLayer(n_in=100, n_out= 10,activation_fn = tanh),
        SoftmaxLayer(n_in=10, n_out=2)], 
        mini_batch_size)


net.SGD(training_data, 60, mini_batch_size, 0.1,validation_data, test_data,lmbda=0.1)

#Cuarta Version
net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(20, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 230,4), 
                      filter_shape=(10, 20,3, 3), 
                      poolsize=(2, 2),activation_fn = ReLU),
        FullyConnectedLayer(
            n_in=10*1*114, n_out=100, activation_fn = ReLU),
	FullyConnectedLayer(n_in=100, n_out= 10,activation_fn = ReLU),
        SoftmaxLayer(n_in=10, n_out=2)], 
        mini_batch_size)


#Quinta version


net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(20, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 230,4), 
                      filter_shape=(10, 20,3, 3), 
                      poolsize=(2, 2),activation_fn = ReLU),
        FullyConnectedLayer(
            n_in=10*1*114, n_out=30, activation_fn = ReLU, p_dropout=0.5),
        SoftmaxLayer(n_in=30, n_out=2)], 
        mini_batch_size)

#Sexta version
import network5
from network5 import Network
from network5 import ConvPoolLayer, FullyConnectedLayer, SoftmaxLayer
training_data, validation_data, test_data = network5.load_data_shared()
mini_batch_size = 10
from network5 import ReLU
from theano.tensor import tanh


net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 462,10), 
                      filter_shape=(20, 1, 3, 3), 
                      poolsize=(2, 2), activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 230,4), 
                      filter_shape=(10, 20,3, 3), 
                      poolsize=(2, 2),activation_fn = ReLU),
        FullyConnectedLayer(
            n_in=10*1*114, n_out=100, activation_fn = ReLU, p_dropout=0.5),
	FullyConnectedLayer(n_in=100, n_out= 10,activation_fn = ReLU, p_dropout = 0.5),
        SoftmaxLayer(n_in=10, n_out=2)], 
        mini_batch_size)


net.SGD(training_data, 60, mini_batch_size, 0.1,validation_data, test_data,lmbda=0.1)


#Codigo para grabar la base de datos
import cPickle
f = file('new_7_network_best.pkl','wb')
cPickle.dump(net,f,protocol=cPickle.HIGHEST_PROTOCOL)
f.close()

import network3
from network3 import Network
from network3 import ConvPoolLayer, FullyConnectedLayer, SoftmaxLayer
training_data, validation_data, test_data = network3.load_data_shared()
from network3 import ReLU

mini_batch_size = 100
net = Network([
        ConvPoolLayer(image_shape=(mini_batch_size, 1, 28, 28), 
                      filter_shape=(20, 1, 5, 5), 
                      poolsize=(2, 2), 
                      activation_fn=ReLU),
        ConvPoolLayer(image_shape=(mini_batch_size, 20, 12, 12), 
                      filter_shape=(40, 20, 5, 5), 
                      poolsize=(2, 2), 
                      activation_fn=ReLU),
        FullyConnectedLayer(
            n_in=40*4*4, n_out=1000, activation_fn=ReLU, p_dropout=0.5),
        FullyConnectedLayer(
            n_in=1000, n_out=1000, activation_fn=ReLU, p_dropout=0.5),
        SoftmaxLayer(n_in=1000, n_out=10, p_dropout=0.5)], 
        mini_batch_size)
net.SGD(training_data, 40, mini_batch_size, 0.03, validation_data, test_data)
#Como plotear el validation y el test set
import matplotlib.pylab as plt
plt.plot(net.valores_test)
plt.ylim(0.0,1.0)
plt.show()
